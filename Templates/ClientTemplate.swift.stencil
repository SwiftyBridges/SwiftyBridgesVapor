// Generated by SwiftyBridges. DO NOT MODIFY!

import Foundation
import SwiftyBridgesClient

{% for apiType in apiDeclarations %}
{{ apiType.leadingTrivia }}
struct {{ apiType.name }}: SwiftyBridgesClient.API {
    private let baseRequest: URLRequest
    private let client: BridgeClient
    
    init(baseRequest: URLRequest, client: BridgeClient = .shared) {
        self.baseRequest = baseRequest
        self.client = client
    }

    {% for method in apiType.publicMethods %}
    {{ method.leadingTrivia.reIndented(toLevel: 1) }}
    func {{ method.name }}(
        {% for parameter in method.parameters %}
        {{ parameter.firstName ?? "" }}{{ parameter.secondName.map { " " + $0 } ?? "" }}: {{ parameter.typeName }}{% if not forloop.last %},{% endif %}
        {% endfor %}
    ) async throws -> {{ method.returnType.effectiveReturnTypeName }} {
        let call = {{ method.generatedTypeName }}(
            {% for parameter in method.parameters %}
            parameter{{ forloop.counter0 }}: {{ parameter.variableName }}{% if not forloop.last %},{% endif %}
            {% endfor %}
        )
        {{ method.returnType.effectiveReturnTypeName == "Void" ? "_ = " : "return " }}try await client.perform(call, baseRequest: baseRequest)
    }
    {% endfor %}
}
{% endfor %}

{% for apiType in apiDeclarations %}
extension {{ apiType.name }} {
    {% for method in apiType.publicMethods %}
    private struct {{ method.generatedTypeName }}: APIMethodCall {
        typealias ReturnType = {{ method.returnType.codableEffectiveReturnTypeName }}
                    
        static let typeName = "{{ apiType.name }}"
        static let methodID = "{{ method.methodID }}"
        
        {% for parameter in method.parameters %}
        var parameter{{ forloop.counter0 }}: {{ parameter.typeName }}
        {% endfor %}
        
        {% if method.parameters.count > 0 %}
        enum CodingKeys: String, CodingKey {
            {% for parameter in method.parameters %}
            case parameter{{ forloop.counter0 }} = "{{ forloop.counter0 }}{{ parameter.label.map { "_" + $0 } ?? "" }}"
            {% endfor %}
        }
        {% endif %}
    }
    {% endfor %}
}
{% endfor %}
