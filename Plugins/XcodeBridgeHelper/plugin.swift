import Foundation
import PackagePlugin

/// This command is intended to be called in an Xcode post-build script to surface the generated API client code.
///
/// To use it, add the following script as a post-build script to the main scheme of your package in Xcode and be sure to select the 'App' target under 'Provide build settings from':
/// ```
/// # This script is needed to ensure that the API client code generated by SwiftyBridges is updated and made accessible each time the server code is updated and built. After building, you can find it under 'GeneratedClientCode' inside the package directory.
/// cd "$WORKSPACE_PATH"
/// swift package --disable-sandbox xcode-bridge-helper
/// ```
/// Also consider making the scheme shared and committing it to git (it is located under .swiftpm/xcode in the package folder) so that the script is already configured for other people or when freshly cloning the project.
@main struct XcodeBridgeHelper: CommandPlugin {
    func performCommand(context: PluginContext, arguments: [String]) async throws {
        guard ProcessInfo.processInfo.environment["SCHEME_NAME"] != nil else {
            // We are not running inside an Xcode post-build script
            throw PluginError.pluginWasNotRunFromXcode
        }
        
        guard let buildProductsPath = ProcessInfo.processInfo.environment["SYMROOT"] else {
            throw PluginError.couldNotReadBuildProductsPath
        }
        
        // Find the folder containing the plugin output:
        let buildProductsFolderURL = URL(fileURLWithPath: buildProductsPath).standardizedFileURL
        let projectDerivedDataFolderURL = buildProductsFolderURL
            .deletingLastPathComponent()
            .deletingLastPathComponent()
        let sourcePackagesFolderURL = projectDerivedDataFolderURL.appendingPathComponent("SourcePackages", isDirectory: true)
        guard FileManager.default.directoryExists(at: sourcePackagesFolderURL) else {
            throw PluginError.couldNotFindSourcePackagesFolder
        }
        
        let packageSourcePackagesFolderURL = sourcePackagesFolderURL.appendingPathComponent(context.package.displayName.lowercased(), isDirectory: true)
        guard FileManager.default.directoryExists(at: packageSourcePackagesFolderURL) else {
            throw PluginError.couldNotFindPackageSourcePackagesFolder
        }
        
        // Gather the info of all targets using the `APICodeGenerator` plugin:
        let contents = try FileManager.default.contentsOfDirectory(
            at: packageSourcePackagesFolderURL,
            includingPropertiesForKeys: nil
        )
        var targets: [TargetInfo] = []
        for potentialTargetURL in contents {
            let targetName = potentialTargetURL.lastPathComponent
            let clientCodeFolderURL = potentialTargetURL
                .appendingPathComponent(Constants.apiCodeGeneratorPluginName)
                .appendingPathComponent(Constants.generatedClientCodeSubfolderName)
            if FileManager.default.directoryExists(at: clientCodeFolderURL) {
                targets.append(TargetInfo(name: targetName, clientCodeFolderURL: clientCodeFolderURL, context: context))
            }
        }
        
        // Generate symlinks to the client code generated by the swift package manager command line tool if it is missing for any target:
        let anySymlinkIsMissing = targets.contains(where: {
            nil == (try? FileManager.default.destinationOfSymbolicLink(atPath: $0.symlinkPath))
        })
        if anySymlinkIsMissing {
            // Run the APICodeGenerator plugin without sandbox to make sure it generates the symlinks
            _ = try? Shell.runCommand("swift package clean && swift build --disable-sandbox")
        }
        
        // Copy the generated client code for each target from the Xcode-specific folder to the target folder of the symlink:
        for target in targets {
            guard let relativeSymlinkTarget = try? FileManager.default.destinationOfSymbolicLink(atPath: target.symlinkPath) else {
                // As a last resort, copy the generated client code directly into the package folder:
                try FileManager.default.robustlyCopyItem(at: target.clientCodeFolderURL, to: URL(fileURLWithPath: target.symlinkPath))
                continue
            }
            
            let symlinkTargetURL = URL(fileURLWithPath: relativeSymlinkTarget, relativeTo: URL(fileURLWithPath: target.symlinkPath).deletingLastPathComponent()).standardizedFileURL
            try FileManager.default.robustlyCopyItem(at: target.clientCodeFolderURL, to: symlinkTargetURL)
        }
    }
}

struct TargetInfo {
    var name: String
    var clientCodeFolderURL: URL
    var context: PluginContext
    
    var symlinkPath: String {
        context.package.directory.appending(subpath: Constants.packageFolderClientCodeSubfolder(forTargetName: self.name)).string
    }
}

enum PluginError: Error, CustomStringConvertible {
    case pluginWasNotRunFromXcode
    case couldNotReadBuildProductsPath
    case couldNotFindSourcePackagesFolder
    case couldNotFindPackageSourcePackagesFolder
    
    var description: String {
        switch self {
        case .pluginWasNotRunFromXcode:
            return """
                This command is intended to be called in an Xcode post-build script to surface the generated API client code. To use it, add the following script as a post-build script to the main scheme of your package in Xcode and be sure to select the 'App' target under 'Provide build settings from':
                
                # This script is needed to ensure that the API client code generated by SwiftyBridges is updated and made accessible each time the server code is updated and built. After building, you can find it under 'GeneratedClientCode' inside the package directory.
                cd "$WORKSPACE_PATH"
                swift package --disable-sandbox xcode-bridge-helper
                
                Also consider making the scheme shared and committing it to git (it is located under .swiftpm/xcode in the package folder) so that the script is already configured for other people or when freshly cloning the project.
                """
        case .couldNotReadBuildProductsPath:
            return """
                xcode-bridge-helper could not read the build products path. Please ensure that this command is run in a post-build script of the main scheme of your package in Xcode and be sure to select the 'App' target under 'Provide build settings from'.
                """
        case .couldNotFindSourcePackagesFolder:
            return """
                xcode-bridge-helper could not find the 'SourcePackages' folder. Please create an issue at https://github.com/SwiftyBridges/SwiftyBridgesVapor.
                """
        case .couldNotFindPackageSourcePackagesFolder:
            return """
                xcode-bridge-helper could not find the package-specific source packages folder. Please create an issue at https://github.com/SwiftyBridges/SwiftyBridgesVapor.
                """
        }
    }
}
