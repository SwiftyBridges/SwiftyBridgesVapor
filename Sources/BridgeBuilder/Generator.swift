//
//  Generator.swift
//  Generator
//
//  Created by Stephen Kockentiedt on 16.09.21.
//

import Foundation
import PathKit
import Stencil
import SwiftSyntax
import SwiftSyntaxBuilder

/// Generates communication code for API definitions parsed by `Analysis` for both server and client.
class Generator {
    private let core: GeneratorCore
    
    private let serverOutputFile: String
    private let clientOutputFile: String
    
    /// Default initializer
    /// - Parameters:
    ///   - sourceInfo: The information generated by ``Analysis``
    ///   - serverCodeWarnings: Warnings that shall be emitted into the generated server code
    ///   - serverOutputFile: Path to the swift file that shall be generated for the server
    ///   - clientOutputFile: Path to the swift file that shall be generated for the client
    init(
        sourceInfo: SourceInfo,
        serverCodeWarnings: [String],
        serverOutputFile: String,
        clientOutputFile: String
    ) {
        self.core = GeneratorCore(sourceInfo: sourceInfo, serverCodeWarnings: serverCodeWarnings)
        self.serverOutputFile = serverOutputFile
        self.clientOutputFile = clientOutputFile
    }
    
    /// Generates the code and writes it to the given output file paths.
    func run() throws {
        let (serverSource, clientSource) = try core.generateSource()
        
        let serverFileURL = URL(fileURLWithPath: serverOutputFile)
        try FileManager.default.createDirectory(at: serverFileURL.deletingLastPathComponent(), withIntermediateDirectories: true)
        try Data(serverSource.utf8)
            .write(to: serverFileURL)
        
        let clientFileURL = URL(fileURLWithPath: clientOutputFile)
        try FileManager.default.createDirectory(at: clientFileURL.deletingLastPathComponent(), withIntermediateDirectories: true)
        try Data(clientSource.utf8)
            .write(to: clientFileURL)
    }
}

struct GeneratorCore {
    var sourceInfo: SourceInfo
    var serverCodeWarnings: [String]
}

extension GeneratorCore {
    func generateSource() throws -> (serverSource: String, clientSource: String) {
        let fileSyntax = try SourceFileSyntax {
            """
            // Generated by SwiftyBridges. DO NOT MODIFY!
            
            import SwiftyBridges
            """
            "import Vapor"
            
            for importName in sourceInfo.conditionalImports {
                """
                #if canImport(\(raw: importName))
                    import \(raw: importName)
                #endif
                """
            }
            
            for warning in serverCodeWarnings {
                ####"""
                
                
                #warning(
                ###"""
                \####(raw: warning)
                """###
                )
                
                
                """####
            }
            
            try FunctionDeclSyntax("private func checkIfAllAPITypesAreCodable()") {
                "#sourceLocation(file: \"\", line: 1)"
                for apiType in sourceInfo.apiDefinitions {
                    for method in apiType.publicMethods {
                        for parameter in method.parameters {
                            "#sourceLocation(file: \(literal: method.filePath), line: \(raw: method.lineNumber))"
                            "let _: APITypesMustBeCodable<\(raw: parameter.typeName)>"
                        }
                        "#sourceLocation(file: \(literal: method.filePath), line: \(raw: method.lineNumber))"
                        "let _: APITypesMustBeCodable<\(raw: method.returnType.codableEffectiveReturnTypeName)>"
                    }
                }
                CodeBlockItemSyntax("#sourceLocation()")
            }
            .with(\.leadingTrivia, .newlines(2))
            .with(\.trailingTrivia, .newlines(2))
            
            for apiType in sourceInfo.apiDefinitions {
                let arrayElementsString = apiType.publicMethods
                    .map { "AnyAPIMethod(method: \($0.generatedTypeName).self)" }
                    .joined(separator: ",\n")
                try ExtensionDeclSyntax("extension \(raw: apiType.name)", membersBuilder: {
                    DeclSyntax("static let remotelyCallableMethods: [AnyAPIMethod<\(raw: apiType.name)>] = [\n\(raw: arrayElementsString)\n]")

                    for method in apiType.publicMethods {
                        try StructDeclSyntax("private struct \(raw: method.generatedTypeName): APIMethodCall") {
                            DeclSyntax("typealias API = \(raw: apiType.name)")
                            DeclSyntax("typealias ReturnType = \(raw: method.returnType.codableEffectiveReturnTypeName)")
                            
                            DeclSyntax("static let methodID: APIMethodID = \(literal: method.methodID)")
                            
                            for (index, parameter) in method.parameters.enumerated() {
                                DeclSyntax("var parameter\(raw: index): \(raw: parameter.typeName)")
                            }
                            
                            if method.parameters.count > 0 {
                                try callTypeCodingKeysDecl(for: method)
                                    .with(\.leadingTrivia, .newlines(2))
                            }
                            
                            try FunctionDeclSyntax("func call(on api: API) async throws -> \(raw: method.returnType.codableEffectiveReturnTypeName )") {
                                let functionParametersString = method.parameters.enumerated()
                                    .map {
                                        if let label = $0.element.label {
                                            "\(label): parameter\($0.offset)"
                                        } else {
                                            "parameter\($0.offset)"
                                        }
                                    }
                                    .joined(separator: ",\n")
                                """
                                \(method.mayThrow ? "try " : "")\(method.isAsync ? "await " : "")api.\(raw: method.name)(
                                    \(raw: functionParametersString)
                                )
                                """
                                if method.returnsVoid {
                                    "return NoReturnValue()"
                                }
                            }
                            .with(\.leadingTrivia, .newlines(2))
                        }
                        .with(\.leadingTrivia, .newlines(2))
                    }
                })
                .with(\.trailingTrivia, .newlines(2))
            }
            
            "private struct APITypesMustBeCodable<T: Codable> {}"
        }
        .formatted()
        
        let additionalContext: [String: Any] = [
            "serverCodeWarnings": serverCodeWarnings,
        ]
        let context = sourceInfo.stencilContext.merging(additionalContext, uniquingKeysWith: { _, second in second })
        
        let loader: FileSystemLoader
        if
            let resourceURL = Bundle.main.resourceURL,
            FileManager.default.fileExists(atPath: resourceURL.appendingPathComponent("Templates").path)
        {
            // We are running via Mint
            loader = FileSystemLoader(paths: [Path(resourceURL.path)])
        }
        else if let resourcePath = Bundle.module.resourcePath
        {
            loader = FileSystemLoader(paths: [Path(resourcePath)])
        }
        else
        {
            loader = FileSystemLoader(bundle: [Bundle.module])
        }
        let environment = Environment(loader: loader)
        
        let serverSource = fileSyntax.description
        
        let clientSource = try environment.renderTemplate(name: "Templates/ClientTemplate.swift.stencil", context: context)
        
        return (serverSource, clientSource)
    }
    
    func callTypeCodingKeysDecl(for method: MethodDefinition) throws -> EnumDeclSyntax {
        try EnumDeclSyntax("enum CodingKeys: String, CodingKey") {
            for (index, parameter) in method.parameters.enumerated() {
                if let label = parameter.label {
                    DeclSyntax(#"case parameter\#(raw: index) = "\#(raw: index)_\#(raw: label)""#)
                } else {
                    DeclSyntax(#"case parameter\#(raw: index) = "\#(raw: index)""#)
                }
            }
        }
    }
}
