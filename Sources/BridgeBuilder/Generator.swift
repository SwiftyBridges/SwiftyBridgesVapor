//
//  Generator.swift
//  Generator
//
//  Created by Stephen Kockentiedt on 16.09.21.
//

import Foundation
import PathKit
import Stencil
import StencilSwiftKit

/// Generates communication code for API definitions parsed by `Analysis` for both server and client.
class Generator {
    private let potentiallyUsedImports: Set<String>
    private let apiDefinitions: [APIDefinition]
    private let serverOutputFile: String
    private let clientOutputFile: String
    
    /// Default initializer
    /// - Parameters:
    ///   - apiDefinitions: Definition infos generated by `Analysis`
    ///   - serverOutputFile: Path to the swift file that shall be generated for the server
    ///   - clientOutputFile: Path to the swift file that shall be generated for the client
    init(potentiallyUsedImports: Set<String>, apiDefinitions: [APIDefinition], serverOutputFile: String, clientOutputFile: String) {
        self.potentiallyUsedImports = potentiallyUsedImports
        self.apiDefinitions = apiDefinitions
        self.serverOutputFile = serverOutputFile
        self.clientOutputFile = clientOutputFile
    }
    
    /// Generates the code and writes it to the given output file paths.
    func run() throws {
        let conditionalImports = potentiallyUsedImports
            .subtracting(["Foundation", "SwiftyBridges", "Vapor"])
            .sorted()
        let context: [String: Any] = [
            "apiDefinitions": apiDefinitions,
            "conditionalImports": conditionalImports,
        ]
        let loader: FileSystemLoader
        if
            let resourceURL = Bundle.main.resourceURL,
            FileManager.default.fileExists(atPath: resourceURL.appendingPathComponent("Templates").path)
        {
            // We are running via Mint
            loader = FileSystemLoader(paths: [Path(resourceURL.path)])
        }
        else
        {
            loader = FileSystemLoader(bundle: [Bundle.module])
        }
        let environment = Environment(
            loader: loader,
            templateClass: StencilSwiftTemplate.self // <- Prevents ugly newlines in generated code
        )
        
        let serverSource = try environment.renderTemplate(name: "Templates/ServerTemplate.swift.stencil", context: context)
        try Data(serverSource.utf8)
            .write(to: URL(fileURLWithPath: serverOutputFile))
        
        let clientSource = try environment.renderTemplate(name: "Templates/ClientTemplate.swift.stencil", context: context)
        try Data(clientSource.utf8)
            .write(to: URL(fileURLWithPath: clientOutputFile))
    }
}
