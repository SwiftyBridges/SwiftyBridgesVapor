// Generated by SwiftyBridges. DO NOT MODIFY!

import SwiftyBridges
import Vapor
{% for import in conditionalImports %}

#if canImport({{ import }})
    import {{ import }}
#endif
{% endfor %}

{% for apiType in apiDefinitions %}
extension {{ apiType.name }} {
    static let remotelyCallableMethods: [AnyAPIMethod<{{ apiType.name }}>] = [
        {% for method in apiType.publicMethods %}
        AnyAPIMethod(method: {{ method.generatedTypeName }}.self),
        {% endfor %}
    ]

    {% for method in apiType.publicMethods %}
    private struct {{ method.generatedTypeName }}: APIMethodCall {
        typealias API = {{ apiType.name }}
        typealias ReturnType = {{ method.returnType.codableEffectiveReturnTypeName }}

        static let methodID: APIMethodID = "{{ method.methodID }}"

        {% for parameter in method.parameters %}
        var parameter{{ forloop.counter0 }}: {{ parameter.typeName }}
        {% endfor %}
        {% include "Templates/CallTypeCodingKeys.swift.stencil" %}
        func call(on api: API) throws -> EventLoopFuture<{{ method.returnType.codableEffectiveReturnTypeName }}> {
            {% if not method.returnType.isFuture %}api.request.eventLoop.future({% endif %}
            {% if method.mayThrow %}try {% endif %}api.{{ method.name }}(
                {% for parameter in method.parameters %}
                {% if parameter.label %}{{ parameter.label }}: {% endif %}parameter{{ forloop.counter0 }}{% if not forloop.last %},{% endif %}
                {% endfor %}
            )
            {% if not method.returnType.isFuture %}){% endif %}
            {% if method.returnsVoid %}.map { NoReturnValue() }{% endif %}
        }
    }

    {% endfor %}
}

{% endfor %}
