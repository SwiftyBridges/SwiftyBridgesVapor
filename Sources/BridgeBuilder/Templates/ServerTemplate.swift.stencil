// Generated by SwiftyBridges. DO NOT MODIFY!

import SwiftyBridges
import Vapor
{% for import in conditionalImports %}
#if canImport({{ import }})
    import {{ import }}
#endif
{% endfor %}

{% for warning in serverCodeWarnings %}
#warning(
###"""
{{ warning }}
"""###
)
{% endfor %}

{% for apiType in apiDefinitions %}
extension {{ apiType.name }} {
    static let remotelyCallableMethods: [AnyAPIMethod<{{ apiType.name }}>] = [
        {% for method in apiType.publicMethods %}
        AnyAPIMethod(method: {{ method.generatedTypeName }}.self),
        {% endfor %}
    ]

    {% for method in apiType.publicMethods %}
    private struct {{ method.generatedTypeName }}: APIMethodCall {
        typealias API = {{ apiType.name }}
        typealias ReturnType = {{ method.returnType.codableEffectiveReturnTypeName }}

        static let methodID: APIMethodID = "{{ method.methodID }}"

        {% for parameter in method.parameters %}
        var parameter{{ forloop.counter0 }}: {{ parameter.typeName }}
        {% endfor %}
        {% include "Templates/CallTypeCodingKeys.swift.stencil" %}
        func call(on api: API) async throws -> {{ method.returnType.codableEffectiveReturnTypeName }} {
            {% if method.mayThrow %}try {% endif %}{% if method.isAsync %}await {% endif %}api.{{ method.name }}(
                {% for parameter in method.parameters %}
                {% if parameter.label %}{{ parameter.label }}: {% endif %}parameter{{ forloop.counter0 }}{% if not forloop.last %},{% endif %}
                {% endfor %}
            )
            {% if method.returnsVoid %}return NoReturnValue(){% endif %}
        }
    }
    {% endfor %}
}
{% endfor %}
